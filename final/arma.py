#! python3

__author__ = "Simanta Barman"
__email__ = "barma017@umn.edu"


import numpy as np
from matplotlib import pyplot as plt
import math
from scipy.optimize import minimize
from plot3d_fast import plot3d_fast as plot3d
import symengine as se

# Reading the data from local storage here. So commenting this part out
##data = []
##with open('finalexam_s21.txt') as file:
##    for line in file.readlines():
##        data.append(float(line.strip()))

data = [1.1447280988543853, -1.265911726417587, -2.1718580591585925,
        2.1835167804115376, 0.5991512800953294, -4.9584992815511875,
        5.248631858572688, 2.9072241133612984, 3.8745960500726286,
        1.9518955806258846, 1.0268486931441738, -2.9741551115357763,
        -0.7605634857235346, 3.4199651491931453, 2.9268592234736257,
        0.19061215008132004, -2.232631684006252, -0.9309179054542989,
        0.8517196512380907, 4.184537175002642, 8.441788678673904,
        -3.133385234614186, 1.3287298474073908, 1.341223905159839,
        8.041895147151264, 3.9916870399103366, -15.049490683870177,
        5.3211095453866655, -2.393071728527461, -1.7835597291554728,
        1.3892127498562814, -3.24933000452787, 2.8821705778556854,
        -4.437329383446752, 10.787894977284859, -15.964664232352018,
        7.505859218866918, 10.852088501434293, 2.1385454984509353,
        2.9366121853804175, -7.7970965906606695, -7.598363931302475,
        4.7961518911759775, 7.6666886741630424, 3.7332547083284,
        -6.403061918822797, 2.658091876759402, 1.760366793635297,
        -5.043449644533747, -2.344748652592309, -1.5099953097082177,
        -0.39725457060714464, -1.270317106106796, 2.3723325430238575,
        -1.7961655111990167, -0.7774500234219887, 7.0926993437647265,
        -0.7058712883357783, 9.470620955255113, -11.326060413074671,
        1.3327699688077466, 2.3590037845201763, 7.608923126871781,
        0.4467324388232399, -10.576468989430996, -5.083599307956887,
        14.750917532544786, 1.1802265813716404, -2.1068449018839654,
        -5.063699422899628, -4.151614876514074, -6.253780972167158,
        -2.0626295372443484, 8.442952972357814, 4.19869228101528,
        2.1688431015741774, -7.098906755185908, -1.1908676753259821,
        9.004575141799707, -1.903851284944286, -2.5019558115620857,
        -2.1224769834170396, 2.732688968421866, 2.184668899454847,
        -1.2572299599952577, 0.18862732058028325, 1.8969715311382724,
        -4.579935093795321, 0.1978098357914997, -6.764504088001845,
        3.4231225796980045, 9.066404556473461, -6.794122695413067,
        4.391367587939486, -1.6237473429044822, -5.798532915536641,
        5.211891590723825, 1.0069968179506252, -5.025336899051738,
        -8.592227096060103, -1.4659321127691776, -3.8636280873171414,
        1.1306272548025487, -3.2134697990874326, -0.7248947087881223,
        6.523147919113603, 3.318976345770375, -3.154189837719472,
        -9.086801949537502, 6.031906249663555, -13.482032248166279,
        2.864698380165931, -4.818721407556369, -1.1406152014238646,
        -0.705623405586485, 0.6237920638457162, 2.751711974536135,
        5.61803214001778, -4.762564915773455, -2.8375804986252224,
        -4.4437840160883555, -0.5931823807772836, 0.07061976368114053,
        0.36307623082020746, -4.21917250122372, 0.30803329104219834,
        -0.6631498297651779, -4.737445210097292, 1.631988257717063,
        -0.3486931497327228, -6.883206264010337, 3.9763475184247388,
        2.7130296700055685, -13.351801050487643, -2.2321060588966297,
        -1.2279731548106394, 6.777010369123577, 5.155244937883902,
        -5.667550803860909, -0.9721140213789228, 0.024036290430156648,
        1.3555706217136576, -0.2277459362095486, -2.335453795951538,
        -0.5307092950318409, -3.621637671319572, 3.0811976156488408,
        -4.081472862791869, -1.1647865455428, 1.5821378184780324]


# Total Samples
N = len(data)


def plotter(data):
    """Plots the time series data"""
    
    fig = plt.figure(figsize=(20, 9))
    time_axis = list(range(len(data)))
    plt.plot(time_axis, data)
    plt.title('Timeseries data vs time')
    plt.xlabel('Time')
    plt.ylabel('Data')
    plt.tight_layout()
    plt.show()


def log_likelihood(params):
    theta, sigma = params
    """Returns the log-likelihood constructed using kalman filter"""
    y = data

    # Lag 0 autocovariance
    sigma_0 = (sigma ** 2) * (1 + theta ** 2)

    # Lag 1 autocovariance
    sigma_1 = (sigma ** 2) * (- theta)

    # Expected values for the initial state
    x_0 = np.array([[0],
                    [0]])

    # Initial Value for the covariance matrix
    P_0 = np.array([[sigma_0, sigma_1], 
                    [sigma_1, sigma_0 - sigma ** 2]])

    # State transition matrix
    A = np.array([[0, 1],
                  [0, 0]])

    # Observation matrix
    C = np.array([[1, 0]])

    # State transition noise covariance
    Q = (sigma ** 2) * np.array([[1, -theta], 
                                 [-theta, theta ** 2]])

    # Initialize state mean
    x_a = x_0

    # Initialize state covariance
    P_a = P_0

    # Initialize Log likelihood
    log_likelihood_value = 0

    for t in range(N): # N is defined outside the function

        # Kalman filter time update
        x_b = A.dot(x_a)

        P_b = A.dot(P_a.dot(A.transpose())) + Q

        y_hat = C.dot(x_b)[0]

        # Kalman gain
        K = P_b.dot(C.T) / C.dot(P_b.dot(C.T))
        
        # Kalman filter measurement update
        x_a = x_b + K * (y[t] - y_hat)
        P_a = P_b - K.dot(C.dot(P_b))

        # Increment to log likelihood
        log_likelihood_value = log_likelihood_value - 0.5 * (math.log(2 * math.pi * P_b[0][0]) + ((y[t] - y_hat)**2 / P_b[0][0]))

    return -log_likelihood_value[0]


if __name__ == '__main__':
    sigma = se.var('σ')
    theta = se.var('θ')
    res = minimize(log_likelihood, [0.1, 2])
    print(res)
##    ll = log_likelihood(theta, sigma)
##    se.symplify(ll)
##    plot3d(log_likelihood, x=(-1, 1, 'theta'), y=(-1, 1, 'sigma'))
    
    
